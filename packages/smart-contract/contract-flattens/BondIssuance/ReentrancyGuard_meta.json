{"compiler":{"version":"0.8.18+commit.87f61d96"},"language":"Solidity","output":{"abi":[],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"contract-flattens/BondIssuance/BondIssuance_flatten.sol":"ReentrancyGuard"},"evmVersion":"paris","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[],"viaIR":true},"sources":{"contract-flattens/BondIssuance/BondIssuance_flatten.sol":{"keccak256":"0x7662c6f630c5c3468a0dc8fb48474a5d8a2ca45ecefd57aa95373d9a02495734","license":"Apache-2.0 AND MIT","urls":["bzz-raw://2cecbe01d3008235b8c2640ccea174e3ee71ca6b721b99a2d7c7dba18c5acb7b","dweb:/ipfs/QmPooiniLkg8vCEDragir5w1kRnEjSPr2waax5CdXJYGA8"]}},"version":1}