{"compiler":{"version":"0.8.18+commit.87f61d96"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"},{"internalType":"uint256","name":"allowance","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"approved","type":"address"},{"internalType":"uint256","name":"serialNumber","type":"uint256"}],"name":"approveNFT","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"token","type":"address"}],"name":"associateToken","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address[]","name":"tokens","type":"address[]"}],"name":"associateTokens","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"int64","name":"amount","type":"int64"},{"internalType":"int64[]","name":"serialNumbers","type":"int64[]"}],"name":"burnToken","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"},{"internalType":"int64","name":"newTotalSupply","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"address","name":"treasury","type":"address"},{"internalType":"string","name":"memo","type":"string"},{"internalType":"bool","name":"tokenSupplyType","type":"bool"},{"internalType":"int64","name":"maxSupply","type":"int64"},{"internalType":"bool","name":"freezeDefault","type":"bool"},{"components":[{"internalType":"uint256","name":"keyType","type":"uint256"},{"components":[{"internalType":"bool","name":"inheritAccountKey","type":"bool"},{"internalType":"address","name":"contractId","type":"address"},{"internalType":"bytes","name":"ed25519","type":"bytes"},{"internalType":"bytes","name":"ECDSA_secp256k1","type":"bytes"},{"internalType":"address","name":"delegatableContractId","type":"address"}],"internalType":"struct IHederaTokenService.KeyValue","name":"key","type":"tuple"}],"internalType":"struct IHederaTokenService.TokenKey[]","name":"tokenKeys","type":"tuple[]"},{"components":[{"internalType":"int64","name":"second","type":"int64"},{"internalType":"address","name":"autoRenewAccount","type":"address"},{"internalType":"int64","name":"autoRenewPeriod","type":"int64"}],"internalType":"struct IHederaTokenService.Expiry","name":"expiry","type":"tuple"}],"internalType":"struct IHederaTokenService.HederaToken","name":"token","type":"tuple"},{"internalType":"int64","name":"initialTotalSupply","type":"int64"},{"internalType":"int32","name":"decimals","type":"int32"}],"name":"createFungibleToken","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"},{"internalType":"address","name":"tokenAddress","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"address","name":"treasury","type":"address"},{"internalType":"string","name":"memo","type":"string"},{"internalType":"bool","name":"tokenSupplyType","type":"bool"},{"internalType":"int64","name":"maxSupply","type":"int64"},{"internalType":"bool","name":"freezeDefault","type":"bool"},{"components":[{"internalType":"uint256","name":"keyType","type":"uint256"},{"components":[{"internalType":"bool","name":"inheritAccountKey","type":"bool"},{"internalType":"address","name":"contractId","type":"address"},{"internalType":"bytes","name":"ed25519","type":"bytes"},{"internalType":"bytes","name":"ECDSA_secp256k1","type":"bytes"},{"internalType":"address","name":"delegatableContractId","type":"address"}],"internalType":"struct IHederaTokenService.KeyValue","name":"key","type":"tuple"}],"internalType":"struct IHederaTokenService.TokenKey[]","name":"tokenKeys","type":"tuple[]"},{"components":[{"internalType":"int64","name":"second","type":"int64"},{"internalType":"address","name":"autoRenewAccount","type":"address"},{"internalType":"int64","name":"autoRenewPeriod","type":"int64"}],"internalType":"struct IHederaTokenService.Expiry","name":"expiry","type":"tuple"}],"internalType":"struct IHederaTokenService.HederaToken","name":"token","type":"tuple"},{"internalType":"int64","name":"initialTotalSupply","type":"int64"},{"internalType":"int32","name":"decimals","type":"int32"},{"components":[{"internalType":"int64","name":"amount","type":"int64"},{"internalType":"address","name":"tokenId","type":"address"},{"internalType":"bool","name":"useHbarsForPayment","type":"bool"},{"internalType":"bool","name":"useCurrentTokenForPayment","type":"bool"},{"internalType":"address","name":"feeCollector","type":"address"}],"internalType":"struct IHederaTokenService.FixedFee[]","name":"fixedFees","type":"tuple[]"},{"components":[{"internalType":"int64","name":"numerator","type":"int64"},{"internalType":"int64","name":"denominator","type":"int64"},{"internalType":"int64","name":"minimumAmount","type":"int64"},{"internalType":"int64","name":"maximumAmount","type":"int64"},{"internalType":"bool","name":"netOfTransfers","type":"bool"},{"internalType":"address","name":"feeCollector","type":"address"}],"internalType":"struct IHederaTokenService.FractionalFee[]","name":"fractionalFees","type":"tuple[]"}],"name":"createFungibleTokenWithCustomFees","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"},{"internalType":"address","name":"tokenAddress","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"address","name":"treasury","type":"address"},{"internalType":"string","name":"memo","type":"string"},{"internalType":"bool","name":"tokenSupplyType","type":"bool"},{"internalType":"int64","name":"maxSupply","type":"int64"},{"internalType":"bool","name":"freezeDefault","type":"bool"},{"components":[{"internalType":"uint256","name":"keyType","type":"uint256"},{"components":[{"internalType":"bool","name":"inheritAccountKey","type":"bool"},{"internalType":"address","name":"contractId","type":"address"},{"internalType":"bytes","name":"ed25519","type":"bytes"},{"internalType":"bytes","name":"ECDSA_secp256k1","type":"bytes"},{"internalType":"address","name":"delegatableContractId","type":"address"}],"internalType":"struct IHederaTokenService.KeyValue","name":"key","type":"tuple"}],"internalType":"struct IHederaTokenService.TokenKey[]","name":"tokenKeys","type":"tuple[]"},{"components":[{"internalType":"int64","name":"second","type":"int64"},{"internalType":"address","name":"autoRenewAccount","type":"address"},{"internalType":"int64","name":"autoRenewPeriod","type":"int64"}],"internalType":"struct IHederaTokenService.Expiry","name":"expiry","type":"tuple"}],"internalType":"struct IHederaTokenService.HederaToken","name":"token","type":"tuple"}],"name":"createNonFungibleToken","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"},{"internalType":"address","name":"tokenAddress","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"address","name":"treasury","type":"address"},{"internalType":"string","name":"memo","type":"string"},{"internalType":"bool","name":"tokenSupplyType","type":"bool"},{"internalType":"int64","name":"maxSupply","type":"int64"},{"internalType":"bool","name":"freezeDefault","type":"bool"},{"components":[{"internalType":"uint256","name":"keyType","type":"uint256"},{"components":[{"internalType":"bool","name":"inheritAccountKey","type":"bool"},{"internalType":"address","name":"contractId","type":"address"},{"internalType":"bytes","name":"ed25519","type":"bytes"},{"internalType":"bytes","name":"ECDSA_secp256k1","type":"bytes"},{"internalType":"address","name":"delegatableContractId","type":"address"}],"internalType":"struct IHederaTokenService.KeyValue","name":"key","type":"tuple"}],"internalType":"struct IHederaTokenService.TokenKey[]","name":"tokenKeys","type":"tuple[]"},{"components":[{"internalType":"int64","name":"second","type":"int64"},{"internalType":"address","name":"autoRenewAccount","type":"address"},{"internalType":"int64","name":"autoRenewPeriod","type":"int64"}],"internalType":"struct IHederaTokenService.Expiry","name":"expiry","type":"tuple"}],"internalType":"struct IHederaTokenService.HederaToken","name":"token","type":"tuple"},{"components":[{"internalType":"int64","name":"amount","type":"int64"},{"internalType":"address","name":"tokenId","type":"address"},{"internalType":"bool","name":"useHbarsForPayment","type":"bool"},{"internalType":"bool","name":"useCurrentTokenForPayment","type":"bool"},{"internalType":"address","name":"feeCollector","type":"address"}],"internalType":"struct IHederaTokenService.FixedFee[]","name":"fixedFees","type":"tuple[]"},{"components":[{"internalType":"int64","name":"numerator","type":"int64"},{"internalType":"int64","name":"denominator","type":"int64"},{"internalType":"int64","name":"amount","type":"int64"},{"internalType":"address","name":"tokenId","type":"address"},{"internalType":"bool","name":"useHbarsForPayment","type":"bool"},{"internalType":"address","name":"feeCollector","type":"address"}],"internalType":"struct IHederaTokenService.RoyaltyFee[]","name":"royaltyFees","type":"tuple[]"}],"name":"createNonFungibleTokenWithCustomFees","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"},{"internalType":"address","name":"tokenAddress","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"components":[{"internalType":"address","name":"accountID","type":"address"},{"internalType":"int64","name":"amount","type":"int64"},{"internalType":"bool","name":"isApproval","type":"bool"}],"internalType":"struct IHederaTokenService.AccountAmount[]","name":"transfers","type":"tuple[]"}],"internalType":"struct IHederaTokenService.TransferList","name":"transferList","type":"tuple"},{"components":[{"internalType":"address","name":"token","type":"address"},{"components":[{"internalType":"address","name":"accountID","type":"address"},{"internalType":"int64","name":"amount","type":"int64"},{"internalType":"bool","name":"isApproval","type":"bool"}],"internalType":"struct IHederaTokenService.AccountAmount[]","name":"transfers","type":"tuple[]"},{"components":[{"internalType":"address","name":"senderAccountID","type":"address"},{"internalType":"address","name":"receiverAccountID","type":"address"},{"internalType":"int64","name":"serialNumber","type":"int64"},{"internalType":"bool","name":"isApproval","type":"bool"}],"internalType":"struct IHederaTokenService.NftTransfer[]","name":"nftTransfers","type":"tuple[]"}],"internalType":"struct IHederaTokenService.TokenTransferList[]","name":"tokenTransfers","type":"tuple[]"}],"name":"cryptoTransfer","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"deleteToken","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"token","type":"address"}],"name":"dissociateToken","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address[]","name":"tokens","type":"address[]"}],"name":"dissociateTokens","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"}],"name":"freezeToken","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"serialNumber","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"},{"internalType":"address","name":"approved","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getFungibleTokenInfo","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"},{"components":[{"components":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"address","name":"treasury","type":"address"},{"internalType":"string","name":"memo","type":"string"},{"internalType":"bool","name":"tokenSupplyType","type":"bool"},{"internalType":"int64","name":"maxSupply","type":"int64"},{"internalType":"bool","name":"freezeDefault","type":"bool"},{"components":[{"internalType":"uint256","name":"keyType","type":"uint256"},{"components":[{"internalType":"bool","name":"inheritAccountKey","type":"bool"},{"internalType":"address","name":"contractId","type":"address"},{"internalType":"bytes","name":"ed25519","type":"bytes"},{"internalType":"bytes","name":"ECDSA_secp256k1","type":"bytes"},{"internalType":"address","name":"delegatableContractId","type":"address"}],"internalType":"struct IHederaTokenService.KeyValue","name":"key","type":"tuple"}],"internalType":"struct IHederaTokenService.TokenKey[]","name":"tokenKeys","type":"tuple[]"},{"components":[{"internalType":"int64","name":"second","type":"int64"},{"internalType":"address","name":"autoRenewAccount","type":"address"},{"internalType":"int64","name":"autoRenewPeriod","type":"int64"}],"internalType":"struct IHederaTokenService.Expiry","name":"expiry","type":"tuple"}],"internalType":"struct IHederaTokenService.HederaToken","name":"token","type":"tuple"},{"internalType":"int64","name":"totalSupply","type":"int64"},{"internalType":"bool","name":"deleted","type":"bool"},{"internalType":"bool","name":"defaultKycStatus","type":"bool"},{"internalType":"bool","name":"pauseStatus","type":"bool"},{"components":[{"internalType":"int64","name":"amount","type":"int64"},{"internalType":"address","name":"tokenId","type":"address"},{"internalType":"bool","name":"useHbarsForPayment","type":"bool"},{"internalType":"bool","name":"useCurrentTokenForPayment","type":"bool"},{"internalType":"address","name":"feeCollector","type":"address"}],"internalType":"struct IHederaTokenService.FixedFee[]","name":"fixedFees","type":"tuple[]"},{"components":[{"internalType":"int64","name":"numerator","type":"int64"},{"internalType":"int64","name":"denominator","type":"int64"},{"internalType":"int64","name":"minimumAmount","type":"int64"},{"internalType":"int64","name":"maximumAmount","type":"int64"},{"internalType":"bool","name":"netOfTransfers","type":"bool"},{"internalType":"address","name":"feeCollector","type":"address"}],"internalType":"struct IHederaTokenService.FractionalFee[]","name":"fractionalFees","type":"tuple[]"},{"components":[{"internalType":"int64","name":"numerator","type":"int64"},{"internalType":"int64","name":"denominator","type":"int64"},{"internalType":"int64","name":"amount","type":"int64"},{"internalType":"address","name":"tokenId","type":"address"},{"internalType":"bool","name":"useHbarsForPayment","type":"bool"},{"internalType":"address","name":"feeCollector","type":"address"}],"internalType":"struct IHederaTokenService.RoyaltyFee[]","name":"royaltyFees","type":"tuple[]"},{"internalType":"string","name":"ledgerId","type":"string"}],"internalType":"struct IHederaTokenService.TokenInfo","name":"tokenInfo","type":"tuple"},{"internalType":"int32","name":"decimals","type":"int32"}],"internalType":"struct IHederaTokenService.FungibleTokenInfo","name":"fungibleTokenInfo","type":"tuple"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"int64","name":"serialNumber","type":"int64"}],"name":"getNonFungibleTokenInfo","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"},{"components":[{"components":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"address","name":"treasury","type":"address"},{"internalType":"string","name":"memo","type":"string"},{"internalType":"bool","name":"tokenSupplyType","type":"bool"},{"internalType":"int64","name":"maxSupply","type":"int64"},{"internalType":"bool","name":"freezeDefault","type":"bool"},{"components":[{"internalType":"uint256","name":"keyType","type":"uint256"},{"components":[{"internalType":"bool","name":"inheritAccountKey","type":"bool"},{"internalType":"address","name":"contractId","type":"address"},{"internalType":"bytes","name":"ed25519","type":"bytes"},{"internalType":"bytes","name":"ECDSA_secp256k1","type":"bytes"},{"internalType":"address","name":"delegatableContractId","type":"address"}],"internalType":"struct IHederaTokenService.KeyValue","name":"key","type":"tuple"}],"internalType":"struct IHederaTokenService.TokenKey[]","name":"tokenKeys","type":"tuple[]"},{"components":[{"internalType":"int64","name":"second","type":"int64"},{"internalType":"address","name":"autoRenewAccount","type":"address"},{"internalType":"int64","name":"autoRenewPeriod","type":"int64"}],"internalType":"struct IHederaTokenService.Expiry","name":"expiry","type":"tuple"}],"internalType":"struct IHederaTokenService.HederaToken","name":"token","type":"tuple"},{"internalType":"int64","name":"totalSupply","type":"int64"},{"internalType":"bool","name":"deleted","type":"bool"},{"internalType":"bool","name":"defaultKycStatus","type":"bool"},{"internalType":"bool","name":"pauseStatus","type":"bool"},{"components":[{"internalType":"int64","name":"amount","type":"int64"},{"internalType":"address","name":"tokenId","type":"address"},{"internalType":"bool","name":"useHbarsForPayment","type":"bool"},{"internalType":"bool","name":"useCurrentTokenForPayment","type":"bool"},{"internalType":"address","name":"feeCollector","type":"address"}],"internalType":"struct IHederaTokenService.FixedFee[]","name":"fixedFees","type":"tuple[]"},{"components":[{"internalType":"int64","name":"numerator","type":"int64"},{"internalType":"int64","name":"denominator","type":"int64"},{"internalType":"int64","name":"minimumAmount","type":"int64"},{"internalType":"int64","name":"maximumAmount","type":"int64"},{"internalType":"bool","name":"netOfTransfers","type":"bool"},{"internalType":"address","name":"feeCollector","type":"address"}],"internalType":"struct IHederaTokenService.FractionalFee[]","name":"fractionalFees","type":"tuple[]"},{"components":[{"internalType":"int64","name":"numerator","type":"int64"},{"internalType":"int64","name":"denominator","type":"int64"},{"internalType":"int64","name":"amount","type":"int64"},{"internalType":"address","name":"tokenId","type":"address"},{"internalType":"bool","name":"useHbarsForPayment","type":"bool"},{"internalType":"address","name":"feeCollector","type":"address"}],"internalType":"struct IHederaTokenService.RoyaltyFee[]","name":"royaltyFees","type":"tuple[]"},{"internalType":"string","name":"ledgerId","type":"string"}],"internalType":"struct IHederaTokenService.TokenInfo","name":"tokenInfo","type":"tuple"},{"internalType":"int64","name":"serialNumber","type":"int64"},{"internalType":"address","name":"ownerId","type":"address"},{"internalType":"int64","name":"creationTime","type":"int64"},{"internalType":"bytes","name":"metadata","type":"bytes"},{"internalType":"address","name":"spenderId","type":"address"}],"internalType":"struct IHederaTokenService.NonFungibleTokenInfo","name":"nonFungibleTokenInfo","type":"tuple"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getTokenCustomFees","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"},{"components":[{"internalType":"int64","name":"amount","type":"int64"},{"internalType":"address","name":"tokenId","type":"address"},{"internalType":"bool","name":"useHbarsForPayment","type":"bool"},{"internalType":"bool","name":"useCurrentTokenForPayment","type":"bool"},{"internalType":"address","name":"feeCollector","type":"address"}],"internalType":"struct IHederaTokenService.FixedFee[]","name":"fixedFees","type":"tuple[]"},{"components":[{"internalType":"int64","name":"numerator","type":"int64"},{"internalType":"int64","name":"denominator","type":"int64"},{"internalType":"int64","name":"minimumAmount","type":"int64"},{"internalType":"int64","name":"maximumAmount","type":"int64"},{"internalType":"bool","name":"netOfTransfers","type":"bool"},{"internalType":"address","name":"feeCollector","type":"address"}],"internalType":"struct IHederaTokenService.FractionalFee[]","name":"fractionalFees","type":"tuple[]"},{"components":[{"internalType":"int64","name":"numerator","type":"int64"},{"internalType":"int64","name":"denominator","type":"int64"},{"internalType":"int64","name":"amount","type":"int64"},{"internalType":"address","name":"tokenId","type":"address"},{"internalType":"bool","name":"useHbarsForPayment","type":"bool"},{"internalType":"address","name":"feeCollector","type":"address"}],"internalType":"struct IHederaTokenService.RoyaltyFee[]","name":"royaltyFees","type":"tuple[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getTokenDefaultFreezeStatus","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"},{"internalType":"bool","name":"defaultFreezeStatus","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getTokenDefaultKycStatus","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"},{"internalType":"bool","name":"defaultKycStatus","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getTokenExpiryInfo","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"},{"components":[{"internalType":"int64","name":"second","type":"int64"},{"internalType":"address","name":"autoRenewAccount","type":"address"},{"internalType":"int64","name":"autoRenewPeriod","type":"int64"}],"internalType":"struct IHederaTokenService.Expiry","name":"expiry","type":"tuple"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getTokenInfo","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"},{"components":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"address","name":"treasury","type":"address"},{"internalType":"string","name":"memo","type":"string"},{"internalType":"bool","name":"tokenSupplyType","type":"bool"},{"internalType":"int64","name":"maxSupply","type":"int64"},{"internalType":"bool","name":"freezeDefault","type":"bool"},{"components":[{"internalType":"uint256","name":"keyType","type":"uint256"},{"components":[{"internalType":"bool","name":"inheritAccountKey","type":"bool"},{"internalType":"address","name":"contractId","type":"address"},{"internalType":"bytes","name":"ed25519","type":"bytes"},{"internalType":"bytes","name":"ECDSA_secp256k1","type":"bytes"},{"internalType":"address","name":"delegatableContractId","type":"address"}],"internalType":"struct IHederaTokenService.KeyValue","name":"key","type":"tuple"}],"internalType":"struct IHederaTokenService.TokenKey[]","name":"tokenKeys","type":"tuple[]"},{"components":[{"internalType":"int64","name":"second","type":"int64"},{"internalType":"address","name":"autoRenewAccount","type":"address"},{"internalType":"int64","name":"autoRenewPeriod","type":"int64"}],"internalType":"struct IHederaTokenService.Expiry","name":"expiry","type":"tuple"}],"internalType":"struct IHederaTokenService.HederaToken","name":"token","type":"tuple"},{"internalType":"int64","name":"totalSupply","type":"int64"},{"internalType":"bool","name":"deleted","type":"bool"},{"internalType":"bool","name":"defaultKycStatus","type":"bool"},{"internalType":"bool","name":"pauseStatus","type":"bool"},{"components":[{"internalType":"int64","name":"amount","type":"int64"},{"internalType":"address","name":"tokenId","type":"address"},{"internalType":"bool","name":"useHbarsForPayment","type":"bool"},{"internalType":"bool","name":"useCurrentTokenForPayment","type":"bool"},{"internalType":"address","name":"feeCollector","type":"address"}],"internalType":"struct IHederaTokenService.FixedFee[]","name":"fixedFees","type":"tuple[]"},{"components":[{"internalType":"int64","name":"numerator","type":"int64"},{"internalType":"int64","name":"denominator","type":"int64"},{"internalType":"int64","name":"minimumAmount","type":"int64"},{"internalType":"int64","name":"maximumAmount","type":"int64"},{"internalType":"bool","name":"netOfTransfers","type":"bool"},{"internalType":"address","name":"feeCollector","type":"address"}],"internalType":"struct IHederaTokenService.FractionalFee[]","name":"fractionalFees","type":"tuple[]"},{"components":[{"internalType":"int64","name":"numerator","type":"int64"},{"internalType":"int64","name":"denominator","type":"int64"},{"internalType":"int64","name":"amount","type":"int64"},{"internalType":"address","name":"tokenId","type":"address"},{"internalType":"bool","name":"useHbarsForPayment","type":"bool"},{"internalType":"address","name":"feeCollector","type":"address"}],"internalType":"struct IHederaTokenService.RoyaltyFee[]","name":"royaltyFees","type":"tuple[]"},{"internalType":"string","name":"ledgerId","type":"string"}],"internalType":"struct IHederaTokenService.TokenInfo","name":"tokenInfo","type":"tuple"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"keyType","type":"uint256"}],"name":"getTokenKey","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"},{"components":[{"internalType":"bool","name":"inheritAccountKey","type":"bool"},{"internalType":"address","name":"contractId","type":"address"},{"internalType":"bytes","name":"ed25519","type":"bytes"},{"internalType":"bytes","name":"ECDSA_secp256k1","type":"bytes"},{"internalType":"address","name":"delegatableContractId","type":"address"}],"internalType":"struct IHederaTokenService.KeyValue","name":"key","type":"tuple"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getTokenType","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"},{"internalType":"int32","name":"tokenType","type":"int32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"}],"name":"grantTokenKyc","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"},{"internalType":"bool","name":"approved","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"}],"name":"isFrozen","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"},{"internalType":"bool","name":"frozen","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"}],"name":"isKyc","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"},{"internalType":"bool","name":"kycGranted","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"isToken","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"},{"internalType":"bool","name":"isToken","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"int64","name":"amount","type":"int64"},{"internalType":"bytes[]","name":"metadata","type":"bytes[]"}],"name":"mintToken","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"},{"internalType":"int64","name":"newTotalSupply","type":"int64"},{"internalType":"int64[]","name":"serialNumbers","type":"int64[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"pauseToken","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"bytes","name":"encodedFunctionSelector","type":"bytes"}],"name":"redirectForToken","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"},{"internalType":"bytes","name":"response","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeTokenKyc","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"serialNumber","type":"uint256"}],"name":"transferFromNFT","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int64","name":"serialNumber","type":"int64"}],"name":"transferNFT","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address[]","name":"sender","type":"address[]"},{"internalType":"address[]","name":"receiver","type":"address[]"},{"internalType":"int64[]","name":"serialNumber","type":"int64[]"}],"name":"transferNFTs","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int64","name":"amount","type":"int64"}],"name":"transferToken","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address[]","name":"accountId","type":"address[]"},{"internalType":"int64[]","name":"amount","type":"int64[]"}],"name":"transferTokens","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"}],"name":"unfreezeToken","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"unpauseToken","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"components":[{"internalType":"int64","name":"second","type":"int64"},{"internalType":"address","name":"autoRenewAccount","type":"address"},{"internalType":"int64","name":"autoRenewPeriod","type":"int64"}],"internalType":"struct IHederaTokenService.Expiry","name":"expiryInfo","type":"tuple"}],"name":"updateTokenExpiryInfo","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"address","name":"treasury","type":"address"},{"internalType":"string","name":"memo","type":"string"},{"internalType":"bool","name":"tokenSupplyType","type":"bool"},{"internalType":"int64","name":"maxSupply","type":"int64"},{"internalType":"bool","name":"freezeDefault","type":"bool"},{"components":[{"internalType":"uint256","name":"keyType","type":"uint256"},{"components":[{"internalType":"bool","name":"inheritAccountKey","type":"bool"},{"internalType":"address","name":"contractId","type":"address"},{"internalType":"bytes","name":"ed25519","type":"bytes"},{"internalType":"bytes","name":"ECDSA_secp256k1","type":"bytes"},{"internalType":"address","name":"delegatableContractId","type":"address"}],"internalType":"struct IHederaTokenService.KeyValue","name":"key","type":"tuple"}],"internalType":"struct IHederaTokenService.TokenKey[]","name":"tokenKeys","type":"tuple[]"},{"components":[{"internalType":"int64","name":"second","type":"int64"},{"internalType":"address","name":"autoRenewAccount","type":"address"},{"internalType":"int64","name":"autoRenewPeriod","type":"int64"}],"internalType":"struct IHederaTokenService.Expiry","name":"expiry","type":"tuple"}],"internalType":"struct IHederaTokenService.HederaToken","name":"tokenInfo","type":"tuple"}],"name":"updateTokenInfo","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"components":[{"internalType":"uint256","name":"keyType","type":"uint256"},{"components":[{"internalType":"bool","name":"inheritAccountKey","type":"bool"},{"internalType":"address","name":"contractId","type":"address"},{"internalType":"bytes","name":"ed25519","type":"bytes"},{"internalType":"bytes","name":"ECDSA_secp256k1","type":"bytes"},{"internalType":"address","name":"delegatableContractId","type":"address"}],"internalType":"struct IHederaTokenService.KeyValue","name":"key","type":"tuple"}],"internalType":"struct IHederaTokenService.TokenKey[]","name":"keys","type":"tuple[]"}],"name":"updateTokenKeys","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"},{"internalType":"int64","name":"amount","type":"int64"}],"name":"wipeTokenAccount","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"},{"internalType":"int64[]","name":"serialNumbers","type":"int64[]"}],"name":"wipeTokenAccountNFT","outputs":[{"internalType":"int64","name":"responseCode","type":"int64"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"allowance(address,address,address)":{"params":{"owner":"the owner of the tokens to be spent","spender":"the spender of the tokens","token":"The Hedera token address to check the allowance of"},"returns":{"allowance":"The amount which spender is still allowed to withdraw from owner.","responseCode":"The response code for the status of the request. SUCCESS is 22."}},"approve(address,address,uint256)":{"params":{"amount":"the amount of tokens authorized to spend.","spender":"the account address authorized to spend","token":"The hedera token address to approve"},"returns":{"responseCode":"The response code for the status of the request. SUCCESS is 22."}},"approveNFT(address,address,uint256)":{"params":{"approved":"The new approved NFT controller.  To revoke approvals pass in the zero address.","serialNumber":"The NFT serial number  to approve","token":"The Hedera NFT token address to approve"},"returns":{"responseCode":"The response code for the status of the request. SUCCESS is 22."}},"associateToken(address,address)":{"params":{"account":"The account to be associated with the provided token","token":"The token to be associated with the provided account"}},"associateTokens(address,address[])":{"params":{"account":"The account to be associated with the provided tokens","tokens":"The tokens to be associated with the provided account. In the case of NON_FUNGIBLE_UNIQUE               Type, once an account is associated, it can hold any number of NFTs (serial numbers) of that               token type"},"returns":{"responseCode":"The response code for the status of the request. SUCCESS is 22."}},"burnToken(address,int64,int64[])":{"params":{"amount":"Applicable to tokens of type FUNGIBLE_COMMON. The amount to burn from the Treasury Account.                Amount must be a positive non-zero number, not bigger than the token balance of the treasury                account (0; balance], represented in the lowest denomination.","serialNumbers":"Applicable to tokens of type NON_FUNGIBLE_UNIQUE. The list of serial numbers to be burned.","token":"The token for which to burn tokens. If token does not exist, transaction results in              INVALID_TOKEN_ID"},"returns":{"newTotalSupply":"The new supply of tokens. For NFTs it is the total count of NFTs","responseCode":"The response code for the status of the request. SUCCESS is 22."}},"createFungibleToken((string,string,address,string,bool,int64,bool,(uint256,(bool,address,bytes,bytes,address))[],(int64,address,int64)),int64,int32)":{"params":{"decimals":"the number of decimal places a token is divisible by","initialTotalSupply":"Specifies the initial supply of tokens to be put in circulation. The initial supply is sent to the Treasury Account. The supply is in the lowest denomination possible.","token":"the basic properties of the token being created"},"returns":{"responseCode":"The response code for the status of the request. SUCCESS is 22.","tokenAddress":"the created token's address"}},"createFungibleTokenWithCustomFees((string,string,address,string,bool,int64,bool,(uint256,(bool,address,bytes,bytes,address))[],(int64,address,int64)),int64,int32,(int64,address,bool,bool,address)[],(int64,int64,int64,int64,bool,address)[])":{"params":{"decimals":"the number of decimal places a token is divisible by.","fixedFees":"list of fixed fees to apply to the token","fractionalFees":"list of fractional fees to apply to the token","initialTotalSupply":"Specifies the initial supply of tokens to be put in circulation. The initial supply is sent to the Treasury Account. The supply is in the lowest denomination possible.","token":"the basic properties of the token being created"},"returns":{"responseCode":"The response code for the status of the request. SUCCESS is 22.","tokenAddress":"the created token's address"}},"createNonFungibleToken((string,string,address,string,bool,int64,bool,(uint256,(bool,address,bytes,bytes,address))[],(int64,address,int64)))":{"params":{"token":"the basic properties of the token being created"},"returns":{"responseCode":"The response code for the status of the request. SUCCESS is 22.","tokenAddress":"the created token's address"}},"createNonFungibleTokenWithCustomFees((string,string,address,string,bool,int64,bool,(uint256,(bool,address,bytes,bytes,address))[],(int64,address,int64)),(int64,address,bool,bool,address)[],(int64,int64,int64,address,bool,address)[])":{"params":{"fixedFees":"list of fixed fees to apply to the token","royaltyFees":"list of royalty fees to apply to the token","token":"the basic properties of the token being created"},"returns":{"responseCode":"The response code for the status of the request. SUCCESS is 22.","tokenAddress":"the created token's address"}},"cryptoTransfer(((address,int64,bool)[]),(address,(address,int64,bool)[],(address,address,int64,bool)[])[])":{"custom:version":"0.3.0 the signature of the previous version was cryptoTransfer(TokenTransferList[] memory tokenTransfers)","params":{"tokenTransfers":"the list of token transfers to do","transferList":"the list of hbar transfers to do"}},"deleteToken(address)":{"params":{"token":"The token address to be deleted"},"returns":{"responseCode":"The response code for the status of the request. SUCCESS is 22."}},"dissociateToken(address,address)":{"params":{"account":"The account to be associated with the provided token","token":"The token to be associated with the provided account"}},"dissociateTokens(address,address[])":{"params":{"account":"The account to be dissociated from the provided tokens","tokens":"The tokens to be dissociated from the provided account."},"returns":{"responseCode":"The response code for the status of the request. SUCCESS is 22."}},"freezeToken(address,address)":{"params":{"account":"The account address to be frozen","token":"The token address"},"returns":{"responseCode":"The response code for the status of the request. SUCCESS is 22."}},"getApproved(address,uint256)":{"params":{"serialNumber":"The NFT to find the approved address for","token":"The Hedera NFT token address to check approval"},"returns":{"approved":"The approved address for this NFT, or the zero address if there is none","responseCode":"The response code for the status of the request. SUCCESS is 22."}},"getFungibleTokenInfo(address)":{"params":{"token":"The token address to check"},"returns":{"fungibleTokenInfo":"FungibleTokenInfo info for `token`","responseCode":"The response code for the status of the request. SUCCESS is 22."}},"getNonFungibleTokenInfo(address,int64)":{"params":{"serialNumber":"The NFT serialNumber to check","token":"The token address to check"},"returns":{"nonFungibleTokenInfo":"NonFungibleTokenInfo info for `token` `serialNumber`","responseCode":"The response code for the status of the request. SUCCESS is 22."}},"getTokenCustomFees(address)":{"params":{"token":"The token address to check"},"returns":{"fixedFees":"Set of fixed fees for `token`","fractionalFees":"Set of fractional fees for `token`","responseCode":"The response code for the status of the request. SUCCESS is 22.","royaltyFees":"Set of royalty fees for `token`"}},"getTokenDefaultFreezeStatus(address)":{"params":{"token":"The token address to check"},"returns":{"defaultFreezeStatus":"True if `token` default freeze status is frozen.","responseCode":"The response code for the status of the request. SUCCESS is 22."}},"getTokenDefaultKycStatus(address)":{"params":{"token":"The token address to check"},"returns":{"defaultKycStatus":"True if `token` default kyc status is KycNotApplicable and false if Revoked.","responseCode":"The response code for the status of the request. SUCCESS is 22."}},"getTokenExpiryInfo(address)":{"params":{"token":"The token address to check"},"returns":{"expiry":"Expiry info for `token`","responseCode":"The response code for the status of the request. SUCCESS is 22."}},"getTokenInfo(address)":{"params":{"token":"The token address to check"},"returns":{"responseCode":"The response code for the status of the request. SUCCESS is 22.","tokenInfo":"TokenInfo info for `token`"}},"getTokenKey(address,uint256)":{"params":{"keyType":"The keyType of the desired KeyValue","token":"The token address to check"},"returns":{"key":"KeyValue info for key of type `keyType`","responseCode":"The response code for the status of the request. SUCCESS is 22."}},"getTokenType(address)":{"params":{"token":"The token address"},"returns":{"responseCode":"The response code for the status of the request. SUCCESS is 22.","tokenType":"the token type. 0 is FUNGIBLE_COMMON, 1 is NON_FUNGIBLE_UNIQUE, -1 is UNRECOGNIZED"}},"grantTokenKyc(address,address)":{"params":{"account":"The account address to grant kyc","token":"The token address"},"returns":{"responseCode":"The response code for the status of the request. SUCCESS is 22."}},"isApprovedForAll(address,address,address)":{"params":{"operator":"The address that acts on behalf of the owner","owner":"The address that owns the NFTs","token":"The Hedera NFT token address to approve"},"returns":{"approved":"True if `operator` is an approved operator for `owner`, false otherwise","responseCode":"The response code for the status of the request. SUCCESS is 22."}},"isFrozen(address,address)":{"params":{"account":"The account address associated with the token","token":"The token address to check"},"returns":{"frozen":"True if `account` is frozen for `token`","responseCode":"The response code for the status of the request. SUCCESS is 22."}},"isKyc(address,address)":{"params":{"account":"The account address associated with the token","token":"The token address to check"},"returns":{"kycGranted":"True if `account` has kyc granted for `token`","responseCode":"The response code for the status of the request. SUCCESS is 22."}},"isToken(address)":{"params":{"token":"The token address"},"returns":{"isToken":"True if valid token found for the given address","responseCode":"The response code for the status of the request. SUCCESS is 22."}},"mintToken(address,int64,bytes[])":{"params":{"amount":"Applicable to tokens of type FUNGIBLE_COMMON. The amount to mint to the Treasury Account.               Amount must be a positive non-zero number represented in the lowest denomination of the               token. The new supply must be lower than 2^63.","metadata":"Applicable to tokens of type NON_FUNGIBLE_UNIQUE. A list of metadata that are being created.                 Maximum allowed size of each metadata is 100 bytes","token":"The token for which to mint tokens. If token does not exist, transaction results in              INVALID_TOKEN_ID"},"returns":{"newTotalSupply":"The new supply of tokens. For NFTs it is the total count of NFTs","responseCode":"The response code for the status of the request. SUCCESS is 22.","serialNumbers":"If the token is an NFT the newly generate serial numbers, othersise empty."}},"pauseToken(address)":{"params":{"token":"The token address to be paused"},"returns":{"responseCode":"The response code for the status of the request. SUCCESS is 22."}},"redirectForToken(address,bytes)":{"params":{"encodedFunctionSelector":"The function selector from the ERC20 interface + the bytes input for the function called","token":"The token address"},"returns":{"response":"The result of the call that had been encoded and sent for execution.","responseCode":"The response code for the status of the request. SUCCESS is 22."}},"revokeTokenKyc(address,address)":{"params":{"account":"The account address to revoke kyc","token":"The token address"},"returns":{"responseCode":"The response code for the status of the request. SUCCESS is 22."}},"setApprovalForAll(address,address,bool)":{"params":{"approved":"True if the operator is approved, false to revoke approval","operator":"Address to add to the set of authorized operators","token":"The Hedera NFT token address to approve"},"returns":{"responseCode":"The response code for the status of the request. SUCCESS is 22."}},"transferFrom(address,address,address,uint256)":{"params":{"amount":"The amount of tokens to transfer from `from` to `to`","from":"The account address of the owner of the token, on the behalf of which to transfer `amount` tokens","to":"The account address of the receiver of the `amount` tokens","token":"The address of the fungible Hedera token to transfer"},"returns":{"responseCode":"The response code for the status of the request. SUCCESS is 22."}},"transferFromNFT(address,address,address,uint256)":{"params":{"from":"The account address of the owner of `serialNumber` of `token`","serialNumber":"The NFT serial number to transfer","to":"The account address of the receiver of `serialNumber`","token":"The address of the non-fungible Hedera token to transfer"},"returns":{"responseCode":"The response code for the status of the request. SUCCESS is 22."}},"transferNFT(address,address,address,int64)":{"params":{"recipient":"The receiver of the transaction","sender":"The sender for the transaction","serialNumber":"The serial number of the NFT to transfer.","token":"The token to transfer to/from"}},"transferNFTs(address,address[],address[],int64[])":{"params":{"receiver":"the receiver of the nft sent by the same index at sender","sender":"the sender of an nft","serialNumber":"the serial number of the nft sent by the same index at sender","token":"The ID of the token as a solidity address"}},"transferToken(address,address,address,int64)":{"params":{"amount":"Non-negative value to send. a negative value will result in a failure.","recipient":"The receiver of the transaction","sender":"The sender for the transaction","token":"The token to transfer to/from"}},"transferTokens(address,address[],int64[])":{"params":{"accountId":"account to do a transfer to/from","amount":"The amount from the accountId at the same index","token":"The ID of the token as a solidity address"}},"unfreezeToken(address,address)":{"params":{"account":"The account address to be unfrozen","token":"The token address"},"returns":{"responseCode":"The response code for the status of the request. SUCCESS is 22."}},"unpauseToken(address)":{"params":{"token":"The token address to be unpaused"},"returns":{"responseCode":"The response code for the status of the request. SUCCESS is 22."}},"updateTokenExpiryInfo(address,(int64,address,int64))":{"params":{"expiryInfo":"The hedera token expiry info","token":"The token address"},"returns":{"responseCode":"The response code for the status of the request. SUCCESS is 22."}},"updateTokenInfo(address,(string,string,address,string,bool,int64,bool,(uint256,(bool,address,bytes,bytes,address))[],(int64,address,int64)))":{"params":{"token":"The token address","tokenInfo":"The hedera token info to update token with"},"returns":{"responseCode":"The response code for the status of the request. SUCCESS is 22."}},"updateTokenKeys(address,(uint256,(bool,address,bytes,bytes,address))[])":{"params":{"keys":"The token keys","token":"The token address"},"returns":{"responseCode":"The response code for the status of the request. SUCCESS is 22."}},"wipeTokenAccount(address,address,int64)":{"params":{"account":"The account address to revoke kyc","amount":"The number of tokens to wipe","token":"The token address"},"returns":{"responseCode":"The response code for the status of the request. SUCCESS is 22."}},"wipeTokenAccountNFT(address,address,int64[])":{"params":{"account":"The account address to revoke kyc","serialNumbers":"The serial numbers of token to wipe","token":"The token address"},"returns":{"responseCode":"The response code for the status of the request. SUCCESS is 22."}}},"version":1},"userdoc":{"kind":"user","methods":{"allowance(address,address,address)":{"notice":"Returns the amount which spender is still allowed to withdraw from owner. Only Applicable to Fungible Tokens"},"approve(address,address,uint256)":{"notice":"Allows spender to withdraw from your account multiple times, up to the value amount. If this function is called again it overwrites the current allowance with value. Only Applicable to Fungible Tokens"},"approveNFT(address,address,uint256)":{"notice":"Allow or reaffirm the approved address to transfer an NFT the approved address does not own. Only Applicable to NFT Tokens"},"associateToken(address,address)":{"notice":"Single-token variant of associateTokens. Will be mapped to a single entry array call of associateTokens"},"associateTokens(address,address[])":{"notice":"Associates the provided account with the provided tokens. Must be signed by the provided  Account's key or called from the accounts contract key  If the provided account is not found, the transaction will resolve to INVALID_ACCOUNT_ID.  If the provided account has been deleted, the transaction will resolve to ACCOUNT_DELETED.  If any of the provided tokens is not found, the transaction will resolve to INVALID_TOKEN_REF.  If any of the provided tokens has been deleted, the transaction will resolve to TOKEN_WAS_DELETED.  If an association between the provided account and any of the tokens already exists, the  transaction will resolve to TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT.  If the provided account's associations count exceed the constraint of maximum token associations    per account, the transaction will resolve to TOKENS_PER_ACCOUNT_LIMIT_EXCEEDED.  On success, associations between the provided account and tokens are made and the account is    ready to interact with the tokens."},"burnToken(address,int64,int64[])":{"notice":"Burns an amount of the token from the defined treasury account"},"createFungibleToken((string,string,address,string,bool,int64,bool,(uint256,(bool,address,bytes,bytes,address))[],(int64,address,int64)),int64,int32)":{"notice":"Creates a Fungible Token with the specified properties"},"createFungibleTokenWithCustomFees((string,string,address,string,bool,int64,bool,(uint256,(bool,address,bytes,bytes,address))[],(int64,address,int64)),int64,int32,(int64,address,bool,bool,address)[],(int64,int64,int64,int64,bool,address)[])":{"notice":"Creates a Fungible Token with the specified properties"},"createNonFungibleToken((string,string,address,string,bool,int64,bool,(uint256,(bool,address,bytes,bytes,address))[],(int64,address,int64)))":{"notice":"Creates an Non Fungible Unique Token with the specified properties"},"createNonFungibleTokenWithCustomFees((string,string,address,string,bool,int64,bool,(uint256,(bool,address,bytes,bytes,address))[],(int64,address,int64)),(int64,address,bool,bool,address)[],(int64,int64,int64,address,bool,address)[])":{"notice":"Creates an Non Fungible Unique Token with the specified properties"},"cryptoTransfer(((address,int64,bool)[]),(address,(address,int64,bool)[],(address,address,int64,bool)[])[])":{"notice":"Performs transfers among combinations of tokens and hbars"},"deleteToken(address)":{"notice":"Operation to delete token"},"dissociateToken(address,address)":{"notice":"Single-token variant of dissociateTokens. Will be mapped to a single entry array call of dissociateTokens"},"dissociateTokens(address,address[])":{"notice":"Dissociates the provided account with the provided tokens. Must be signed by the provided Account's key. If the provided account is not found, the transaction will resolve to INVALID_ACCOUNT_ID. If the provided account has been deleted, the transaction will resolve to ACCOUNT_DELETED. If any of the provided tokens is not found, the transaction will resolve to INVALID_TOKEN_REF. If any of the provided tokens has been deleted, the transaction will resolve to TOKEN_WAS_DELETED. If an association between the provided account and any of the tokens does not exist, the transaction will resolve to TOKEN_NOT_ASSOCIATED_TO_ACCOUNT. If a token has not been deleted and has not expired, and the user has a nonzero balance, the transaction will resolve to TRANSACTION_REQUIRES_ZERO_TOKEN_BALANCES. If a <b>fungible token</b> has expired, the user can disassociate even if their token balance is not zero. If a <b>non fungible token</b> has expired, the user can <b>not</b> disassociate if their token balance is not zero. The transaction will resolve to TRANSACTION_REQUIRED_ZERO_TOKEN_BALANCES. On success, associations between the provided account and tokens are removed."},"freezeToken(address,address)":{"notice":"Operation to freeze token account"},"getApproved(address,uint256)":{"notice":"Get the approved address for a single NFT Only Applicable to NFT Tokens"},"getFungibleTokenInfo(address)":{"notice":"Query fungible token info"},"getNonFungibleTokenInfo(address,int64)":{"notice":"Query non fungible token info"},"getTokenCustomFees(address)":{"notice":"Query token custom fees"},"getTokenDefaultFreezeStatus(address)":{"notice":"Query token default freeze status"},"getTokenDefaultKycStatus(address)":{"notice":"Query token default kyc status"},"getTokenExpiryInfo(address)":{"notice":"Query token expiry info"},"getTokenInfo(address)":{"notice":"Query token info"},"getTokenKey(address,uint256)":{"notice":"Query token KeyValue"},"getTokenType(address)":{"notice":"Query to return the token type for a given address"},"grantTokenKyc(address,address)":{"notice":"Operation to grant kyc to token account"},"isApprovedForAll(address,address,address)":{"notice":"Query if an address is an authorized operator for another address Only Applicable to NFT Tokens"},"isFrozen(address,address)":{"notice":"Query if token account is frozen"},"isKyc(address,address)":{"notice":"Query if token account has kyc granted"},"isToken(address)":{"notice":"Query if valid token found for the given address"},"mintToken(address,int64,bytes[])":{"notice":"Mints an amount of the token to the defined treasury account"},"pauseToken(address)":{"notice":"Operation to pause token"},"redirectForToken(address,bytes)":{"notice":"Initiates a Redirect For Token"},"revokeTokenKyc(address,address)":{"notice":"Operation to revoke kyc to token account"},"setApprovalForAll(address,address,bool)":{"notice":"Enable or disable approval for a third party (\"operator\") to manage  all of `msg.sender`'s assets"},"transferFrom(address,address,address,uint256)":{"notice":"Only applicable to fungible tokens"},"transferFromNFT(address,address,address,uint256)":{"notice":"Transfers `serialNumber` of `token` from `from` to `to` using the allowance mechanism. Only applicable to NFT tokens"},"transferNFT(address,address,address,int64)":{"notice":"Transfers tokens where the calling account/contract is implicitly the first entry in the token transfer list, where the amount is the value needed to zero balance the transfers. Regular signing rules apply for sending (positive amount) or receiving (negative amount)"},"transferNFTs(address,address[],address[],int64[])":{"notice":"Initiates a Non-Fungable Token Transfer"},"transferToken(address,address,address,int64)":{"notice":"Transfers tokens where the calling account/contract is implicitly the first entry in the token transfer list, where the amount is the value needed to zero balance the transfers. Regular signing rules apply for sending (positive amount) or receiving (negative amount)"},"transferTokens(address,address[],int64[])":{"notice":"Initiates a Fungible Token Transfer"},"unfreezeToken(address,address)":{"notice":"Operation to unfreeze token account"},"unpauseToken(address)":{"notice":"Operation to unpause token"},"updateTokenExpiryInfo(address,(int64,address,int64))":{"notice":"Operation to update token expiry info"},"updateTokenInfo(address,(string,string,address,string,bool,int64,bool,(uint256,(bool,address,bytes,bytes,address))[],(int64,address,int64)))":{"notice":"Operation to update token info"},"updateTokenKeys(address,(uint256,(bool,address,bytes,bytes,address))[])":{"notice":"Operation to update token expiry info"},"wipeTokenAccount(address,address,int64)":{"notice":"Operation to wipe fungible tokens from account"},"wipeTokenAccountNFT(address,address,int64[])":{"notice":"Operation to wipe non fungible tokens from account"}},"version":1}},"settings":{"compilationTarget":{"contract-flattens/BondIssuance/BondIssuance_flatten.sol":"IHederaTokenService"},"evmVersion":"paris","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[],"viaIR":true},"sources":{"contract-flattens/BondIssuance/BondIssuance_flatten.sol":{"keccak256":"0x7662c6f630c5c3468a0dc8fb48474a5d8a2ca45ecefd57aa95373d9a02495734","license":"Apache-2.0 AND MIT","urls":["bzz-raw://2cecbe01d3008235b8c2640ccea174e3ee71ca6b721b99a2d7c7dba18c5acb7b","dweb:/ipfs/QmPooiniLkg8vCEDragir5w1kRnEjSPr2waax5CdXJYGA8"]}},"version":1}